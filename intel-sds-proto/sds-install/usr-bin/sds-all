#!/usr/bin/python
# Copyright 2011 OpenStack, LLC
# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

"""Starter script for All sds services.

This script attempts to start all the sds services in one process.  Each
service is started in its own greenthread.  Please note that exceptions and
sys.exit() on the starting of a service are logged and the script will
continue attempting to launch the rest of the services.

"""


import eventlet

eventlet.monkey_patch()

import os
import sys
import warnings

warnings.simplefilter('once', DeprecationWarning)

from oslo.config import cfg

possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, "sds", "__init__.py")):
    sys.path.insert(0, possible_topdir)

from sds import i18n
i18n.enable_lazy()

# Need to register global_opts
from sds.common import config   # noqa
from sds.i18n import _LE
from sds.openstack.common import log as logging
from sds import service
from sds.common import utils
from sds import version


CONF = cfg.CONF


if __name__ == '__main__':
    CONF(sys.argv[1:], project='sds',
         version=version.version_string())
    logging.setup("sds")
    LOG = logging.getLogger('sds.all')

    utils.monkey_patch()
    launcher = service.process_launcher()
    # sds-api
    try:
        server = service.WSGIService('osapi_sds')
        launcher.launch_service(server, workers=server.workers or 1)
    except (Exception, SystemExit):
        LOG.exception(_LE('Failed to load osapi_sds'))

    for binary in ['sds-api']:
        try:
            launcher.launch_service(service.Service.create(binary=binary))
        except (Exception, SystemExit):
            LOG.exception(_LE('Failed to load %s'), binary)
    launcher.wait()
