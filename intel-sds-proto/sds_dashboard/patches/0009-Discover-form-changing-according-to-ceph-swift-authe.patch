From 7a0651667f6792f4fdf07ef9cc45efad9cc51df0 Mon Sep 17 00:00:00 2001
From: Fegnqian Gao <fengqian.gao@intel.com>
Date: Tue, 13 Jan 2015 15:14:18 +0800
Subject: [PATCH 1/2] Discover form changing according to ceph/swift
 authentication choice

Change discover form based on users' choice of ceph
authentication solution. If use cephx, username/IP is needed.
Or else, users need input IP/username/fsid. For swift, added
keystone authentication choice.
---
 horizon/static/horizon/js/horizon.sds.js           |   42 ++++++++++++++
 .../dashboards/admin/discovercapability/forms.py   |   61 ++++++++++++--------
 2 files changed, 78 insertions(+), 25 deletions(-)

diff --git a/horizon/static/horizon/js/horizon.sds.js b/horizon/static/horizon/js/horizon.sds.js
index 09a34a9..aef3650 100644
--- a/horizon/static/horizon/js/horizon.sds.js
+++ b/horizon/static/horizon/js/horizon.sds.js
@@ -25,13 +25,55 @@ horizon.addInitFunction(function () {
     }
   }
 
+  function update_discover_system_input_fields (field) {
+    var $this = $(field),
+    base_type = $this.val();
+
+    $this.closest(".form-group").nextAll().hide();
+
+    switch(base_type) {
+      case "storage_system":
+        $("#id_storage_system").closest(".form-group").show();
+        break;
+
+      case "ceph":
+        $("#id_ip").closest(".form-group").show();
+        $("#id_user").closest(".form-group").show();
+        $("#id_fsid").closest(".form-group").show();
+        break;
+
+      case "cephx":
+        $("#id_ip").closest(".form-group").show();
+        $("#id_user").closest(".form-group").show();
+        break;
+
+      case "swift":
+        $("#id_ip").closest(".form-group").show();
+        $("#id_user").closest(".form-group").show();
+        $("#id_key").closest(".form-group").show();
+        break;
+
+      case "swift_key":
+        $("#id_ip").closest(".form-group").show();
+        break;
+
+    }
+  }
+
   $(document).on('change', '#id_system_type', function (evt) {
     update_launch_system_displayed_fields(this);
   });
+
+  $(document).on('change', '#id_storage_system', function (evt) {
+    update_discover_system_input_fields(this);
+  });
   
   $('#id_system_type').change();
+  $('#id_storage_system').change();
+
   horizon.modals.addModalInitFunction(function (modal) {
     $(modal).find("#id_system_type").change();
+    $(modal).find("#id_storage_system").change();
   });
 
 });
diff --git a/openstack_dashboard/dashboards/admin/discovercapability/forms.py b/openstack_dashboard/dashboards/admin/discovercapability/forms.py
index df19cf3..e38bca9 100644
--- a/openstack_dashboard/dashboards/admin/discovercapability/forms.py
+++ b/openstack_dashboard/dashboards/admin/discovercapability/forms.py
@@ -22,6 +22,7 @@ from horizon import forms
 from horizon import messages
 
 from openstack_dashboard import api
+from openstack_dashboard.api import base
 
 
 NEW_LINES = re.compile(r"\r|\n")
@@ -33,35 +34,45 @@ NETWORK_ERROR_MESSAGES = {'invalid': _('Network range may '
 
 
 class Discover(forms.SelfHandlingForm):
-    ACCESS_CHOICES = (
-        ("ceph", _("Ceph")),
-        ("swift", _("Swift")),
-    )
 
-    ip = forms.RegexField(max_length=255,
-                           label=_("Network Range"),
-                           regex=NETWORK_RANGE_REGEX,
-                           error_messages=NETWORK_ERROR_MESSAGES)
-
-    storagesystem = forms.ChoiceField(label=_("Storage System"),
-                              choices=ACCESS_CHOICES)
+    storage_system = forms.ChoiceField(label=_("Storage System"), required=True)
+    ip = forms.RegexField(max_length=255, label=_("Network Range"),
+                          regex=NETWORK_RANGE_REGEX,
+                          error_messages=NETWORK_ERROR_MESSAGES, required=False)
+    user = forms.CharField(max_length=255, label=_("User Name"), required=False)
+    fsid = forms.CharField(max_length=255, label=_("Cluster fsid"),
+                           required=False)
+    key = forms.CharField(max_length=255, label=_("Password"), required=False)
+
+    def __init__(self, request, *args, **kwargs):
+        super(Discover, self).__init__(request, *args, **kwargs)
+        storage_choices = [("", _("Select storage system")),
+                           ("ceph", _("Ceph(None authentication)")),
+                           ("cephx", _("Ceph(Cephx authentication)")),
+                           ("swift", _("Swift(User/Password authentication)")),
+                           ("swift_key", _("Swift(Keystone authentication)"))]
+
+        self.fields['storage_system'].choices = storage_choices
 
     def handle(self, request, data):
         try:
-            ip_cidr = data.get("ip")
-            storage_type = data.get("storagesystem")
-
-            #FIXME(fengqian): For now, two type of system could be discovered,
-            #ceph and swift. But UI doesn't provide the input of user and
-            #password. So, hard code is added here.
-            #For ceph, We use Cephx now, so the user name or fsid is not
-            #necessary, just set it to empty.
-            #For swift, fsid is the password.
-            metadata_dict = {'ceph': {},
-                             'swift': {"user": "test:tester",
-                                       "fsid": "testing"}}
-
-            metadata = metadata_dict[storage_type]
+            ip_cidr = data.pop("ip")
+            storage_type = data.pop("storage_system")
+
+            metadata = {}
+            for k, v in data.iteritems():
+                if v:
+                    metadata[k] = v
+            if storage_type == 'swift_key':
+                metadata = {'preauthtoken':request.user.token.id,
+                            'preauthurl':base.url_for(request, "object-store")}
+
+            #NOTE(fengqian): Cephx also means ceph, hard code here.
+            if storage_type in ('cephx', 'ceph'):
+                storage_type = 'ceph'
+            elif storage_type in ('swift', 'swift_key'):
+                storage_type = 'swift'
+
             discover_data = api.sds.discover_storage(request, ip_cidr,
                                                     storage_type, metadata)
             messages.success(request,
-- 
1.7.9.5

